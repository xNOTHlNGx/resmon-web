<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <title>Memory Info</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        .mem-info {
            margin: 10px 0;
        }
        .mem-info strong {
            display: inline-block;
            width: 150px;
            color: #555;
        }
    </style>
</head>
<body>
    <h1>Memory Info</h1>
    <canvas id="RAMchart" width="400" height="200"></canvas>
    <div class="mem-info">
        <strong>Used Memory:</strong> <span id="used-memory">0 GB</span>
        <strong>Available Memory:</strong> <span id="available-memory">0 GB</span>
    </div>

    <script>
        const ctx = document.getElementById('RAMchart').getContext('2d');
        const usedMemorySpan = document.getElementById('used-memory');
        const availableMemorySpan = document.getElementById('available-memory');

        // Initialize the chart
        const ramUsageChart = new Chart(ctx, {
            type: 'line', // Line graph
            data: {
                labels: [], // Timestamps will go here
                datasets: [
                    {
                        label: 'Used Memory (GB)',
                        data: [], // Used memory data
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1, // Smooth line
                    },
                    {
                        label: 'Available Memory (GB)',
                        data: [], // Available memory data
                        borderColor: 'rgba(255, 159, 64, 1)',
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        tension: 0.1, // Smooth line
                    },
                ],
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'second',
                        },
                        title: {
                            display: true,
                            text: 'Time',
                        },
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Memory (GB)',
                        },
                    },
                },
            },
        });

        // Update chart with new data
        const updateChart = (usedMemory, availableMemory) => {
            const now = new Date();
            const timestamp = now.toISOString();

            // Add data points
            ramUsageChart.data.labels.push(timestamp); // Add timestamp
            ramUsageChart.data.datasets[0].data.push(usedMemory); // Add Used Memory
            ramUsageChart.data.datasets[1].data.push(availableMemory); // Add Available Memory

            // Remove old data if there are too many points (keep 30 points max)
            if (ramUsageChart.data.labels.length > 30) {
                ramUsageChart.data.labels.shift(); // Remove the first timestamp
                ramUsageChart.data.datasets[0].data.shift(); // Remove old Used Memory
                ramUsageChart.data.datasets[1].data.shift(); // Remove old Available Memory
            }

            ramUsageChart.update(); // Refresh the chart

            // Update memory info
            usedMemorySpan.textContent = `${usedMemory.toFixed(2)} GB`;
            availableMemorySpan.textContent = `${availableMemory.toFixed(2)} GB`;
        };

        // Set up SSE connection
        const eventSource = new EventSource('/sse/meminfo');
        eventSource.onmessage = function (event) {
            const memInfo = JSON.parse(event.data);

            // Convert memory values to GB
            const totalMemoryKB = parseFloat(memInfo.memTotal.value); // In KB
            const freeMemoryKB = parseFloat(memInfo.memFree.value); // In KB
            const usedMemoryKB = totalMemoryKB - freeMemoryKB; // In KB

            const usedMemoryGB = usedMemoryKB / (1024 * 1024); // Convert to GB
            const availableMemoryGB = freeMemoryKB / (1024 * 1024); // Convert to GB

            updateChart(usedMemoryGB, availableMemoryGB);
        };

        eventSource.onerror = function (error) {
            console.error('SSE connection error:', error);
            eventSource.close();
        };
    </script>
</body>
</html>
